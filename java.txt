Scanner输入数据：
导包：import  java.util.Scanner;
创建对象： Scanner  sc = new Scanner(System.in);
调用：int i=sc.nextInt();///String str=sc.nextLine();

Random随机数：
导包：import java.util.Random;
创建对象：Random r=new Random();
获取随机数:  int number=r.nextInt(10);//0--10不包含10


IDEA内容辅助键和快捷键
快速生成main()方法 ： psvm,回车
System.out.println();输出后并且换行
System.out.print();输出后不换行
快速生成输出语句：sout,回车
 内容辅助键：
Ctrl+Alt+space（内容提示，代码补全）
类：
Alt+Insert  提供构造方法，get,set方法



快捷键：
注释：单行：选中代码，Ctrl+/,再来一次就是取消
         多行：选中代码，Ctrl+Shift+/,再来一次就是取消
格式化：Ctrl+Alt+L



定义数组：
int[]  arr 定义一个int类型的数组，数组名为arr（推荐使用）
int  arr[] 定义一个int类型的变量，变量名为arr数组


数组初始化：
动态初始化：初始化时只指定数组长度，由系统为数组分配初始值
格式： 数据类型[ ]变量名=new数组类型[ 数组长度]；
int [ ]arr=new int [3];
int [ ] arr 是栈内存存储的是局部变量  ，使用完毕，立即消失
new int[3] 是堆内存 ：存储new出来的内容（对象，实体），使用完毕，
会在垃圾回收器空闲时被回收，不是使用完毕就消失

静态初始化：初始化时指定每个数组元素的初始值，由系统决定数组长度
格式：数据类型 [ ] 变量名=new 数据类型[ ] { 数据1，数据2，数据3，......};
int [] arr=new int[]{1,2,3};
简化：数据类型[]变量名={数据1，数据2，......}
int [] arr={1,2,3};



方法的重载：同名不同参，并且在一个class类中；


对象的使用：
创建对象：  类名  对象名 = new 类名（）；
使用对象：  对象名.方法名（）  ///对象名.变量名；

成员变量在堆内存，局部变量在栈内存

针对private修饰的成员变量，如果需要被其他类使用，提供相应的操作：
先设置set，后获取get
提供“set变量名(参数)”方法，用于获设置成员变量的值，方法用public修饰 
提供“get变量名（）”方法，用于获取成员变量的值，方法用public修饰  有返回值


public void setName（String name）
{
	this.name=name;
}
public String getName(){
	return  name;
}
this.name 用this修饰指的是成员变量，name没用this修饰是局部变量,形参
 

给成员变量（private）赋值有两种方法：
1：无参构造方法创建对象后使用setXxx()赋值
2：使用带参数的构造方法直接创建带有属性的对象


字符串String的特点：
1 字符串不可变，它们的值在创建后不能被更改
2 虽然String的值是不可变的，但是它们可以被共享
3 字符串效果相当于字符数组（char [ ]）,但是底层原理是字节数组（byte[  ]）

toCharArray()  字符串转换为字符数组
charAt(int index)  返回字符串中index位置上的字符
String [] split(String regus)根据参数将原来的字符串分割成若干子字符串  

StringBuilder与String的区别：
StringBuilder内容是可变的（.append添加数据返回的是对象自己,既然返回的是对象，
可以接着调用方法s.append("hello").append("java").append("100").reverse()直接反转）
StringBuilder--->String
String s=sb.toString();    //sb为StringBuilder类型
String---->StringBuilder
StringBuilder sb =new StringBuilder(s)   //s为String类型


int----->String
1:String s = ""+number        (number为int类型)
2:String s2 = String.valueOf(number)

String----->int
1:String---->Integer---->int
Integer i1=Integer.valueOf(s3)          (s3为String类型)
int i2=i1.intValue();
2:int i3=Integer.parseInt(s3)



字符串比较：
s1.equals(s2)   ///比较s1,s2所指的内容是否相同    (及其容易忽略)
s1==s2           ///比较的是s1,s2的地址是否相同    

遍历字符串：
获取每一个字符：public  char charAt(int index):返回指定索引处char值，从0开始    s.charAt(i);




集合：
ArrayList构造方法：
public ArrayList（）：创建一个空的集合对象
ArrayList添加方法：
public  boolean add(E e):讲指定的元素追加到此集合的尾部
public void add(int index,E element)  在此集合中的指定位置插入指定的元素
array.remove()括号里面如果是索引，返回的是被删除元素，如果是元素，返回的是true,或者false
array.get(int index)获取元素值
array.size()获取元素个数
array.set(int index,E element)修改指定索引处的元素，返回被修改元素

Collection集合常用方法：
Collection<String> c=new ArrayList<String>();
boolean add(E e)添加元素
boolean remove(Object o)从集合中移除指定的元素
void clear()   清空集合中的元素
boolean contains(Object o)  判断集合中是否存在指定的元素
boolean isEmpty()    判断集合是否为空
int size()   集合的长度，也就是集合中元素的个数

Collection的遍历：通过迭代器获取元素
Iterator<String> it c.iterator();    //获取迭代器对象
再通过it.next()遍历集合中的元素
it.hasNext()   判断集合中是否还有下一元素，返回类型为Boolean类型

List集合特点：
有序，存储于取出的元素顺序一致
可重复
List集合特有方法：
void add int（int index，E element）（在集合中指定位置插入指定元素）
E remove（int index） 删除指定索引处的元素，返回被删除的元素
E set(int index,E element)  修改指定索引处的元素，返回被修改的元素
E get（int index）  返回指定索引处的元素

listIterator 列表迭代器
previous()   可实现逆向遍历
并发修改异常：并发修改异常的出现的原因是：当方法检测到对象的并发修改，但不允许这种修改时，抛出此异常       可以通过迭代器处理


增强for（）循环： 简化数组和Collection集合的遍历
  实现Iterable接口的类允许其对象成为增强型for语句的目标
  它是JDK5之后出现的，其内部原理是一个Iterator迭代器
格式：for（元素数据类型  变量名：数组或者Collection集合）{
	//在此处使用变量即可，该变量就是元素
    }
 
List的子类特点：ArrayList,LinkedList
ArrayList:底层数据结构是数组，查询快，增删慢
LinkedList：底层数据结构是链表，查询慢，增删快

数据结构：
队列：先进先出
栈：先进后出


Set集合特点：
不包括重复元素的集合
没有带索引的方法，所以不能使用普通for遍历



哈希值：
Object类中有public  int hashCode（）  获取对象的哈希值
对象的哈希值特点：
同一对象多次调用hashCode（）方法返回的哈希值相同
默认情况下不同对象的哈希值是不同的，重写hashCode（）方法可以实现不同对象的哈希值相同
当以变量值相同，就认为是同一对象，
需要重写hashCode（）和equals（）方法（）  Ctrl+Alt+v自动生成

LinkedHashSet集合特点：
哈希表和链表实现set接口，具有可预测的迭代次序
由链表保证元素有序，也就是说元素的存取顺序一致
由哈希表保证元素唯一，也就是说没有重复元素


TreeSet集合概述和特点：
元素有序，这里的顺序不是指的存取顺序，而是按照一定规则进行排序，具体排序方式取决于构造方法
TreeSet（）：根据其元素的自然排序进行排序（从小到大排序）
自然排序，就是让元素所属类实现Comparable<>接口，重写compareTo（）
重写方法时，一定要注意排序规则必须按照要求的主要条件和次要条件来写

TreeSet(Comparator  comparator):根据指定的比较器进行排序
没有带索引的方法，不能使用普通for循环遍历，不包含重复元素


类型通配符：< ? >
List<  ?  >:表示元素类型未知的List，它的元素可以匹配任何类型
这种通配符的List仅表示它是各种泛型List的父类，并不能把元素添加到其中

类型通配符上限：<?extends 类型>
List<?extends Number>:它表示类型是Number或者其子类型

类型通配符下限：<? super 类型>
List<? super Number>:它表示的类型是Number或者其父类型

可变参数：参数个数可变，用作方法的形参出现，方法个数就是可变的
格式：修饰符 返回值类型 方法名（数据类型 ...变量名）{    }
可变参数的注意事项：这里的变量其实是一个数组，如果一个方法有多个参数，包含可变参数，可变参数要放在最后







继承：
格式：  public class Zi extends Fu{} 
super关键字的用法和this关键字的用法相似，this：代表本类的对象引用
super：代表父类存储空间的标识（可以理解为父类对象引用）

继承中构造方法的访问特点：
子类中所有的构造方法默认都会访问父类中无参的构造方法，子类构造方法的第一条语句默认都是：super（）
父类方法私有方法不能被重写（被final修饰的也无法被重写）
子类方法访问权限不能更低（ public   >  默认  >  私有  ）
java中只支持单继承，不支持多继承，但是支持多层继承

final修饰特点：
修饰方法：表明该方法是最终方法，不能被重写
修饰变量：表明该变量是常量，不能再次赋值
修饰类：表明该类是最终类，不能被继承
final 修饰局部变量：
变量是基本类型：final修饰指的是基本类型的数据值不能改变
变量是引用类型：final修饰指的是引用类型的地址值不能改变，但是地址里面的内容是可以发生改变的

static 修饰特点：
修饰成员变量（静态成员变量）：
被类的所有对象共享    （这也是我们判断是否使用静态关键字的条件）
可以通过类名调用，也可以通过对象名调用
修饰成员方法（静态成员方法）只能访问静态的成员变量已经成员方法


多态：同一个对象，在不同时刻表现出来的不同形态
多态的前提和实现：
1 有继承 \ 实现关系 2   有方法的重写  3 有父类引用指向子类对象

多态中成员访问特点：
成员变量：编译看左边，执行看左边
成员方法：编译看左边，执行看右边（因为成员方法有重写）
多态中的转型：
向上转型：从子到父，父类引用指向子类对象   Animal a= new Cat();
向下转型：从父到子，父类引用转为子类对象  Cat c = (Cat) a;(强转)


抽象类的特点：
抽象类和抽象方法必须使用abstract关键字修饰
抽象类中不一定有抽象方法，但是抽象方法的类一定是抽象类
抽象类不能实例化，可以通过子类对象实例化，这叫抽象类多态
抽象类的子类，要么重写抽象类中的所有抽象方法，要么本身就是抽象类


接口：
接口用关键字interface修饰public interface 接口名{ }
类实现接口用implements 表示 public class 类名 implement接口名{  }
接口不能实例化，只能通过实现类对象实例化，这个叫接口多态
接口的实现类：要么重写接口中的所有的抽象方法，要么本身是抽象类
接口的成员特点：
成员变量：只能是常量，默认修饰符：public static final
构造方法:接口没有构造方法，因为接口主要是对行为进行抽象的，是没有具体存在的
              一个类如果没有父类，默认继承自Object类
成员方法：只能是抽象方法，默认修饰符public   abstract


接口和抽象类的区别：
（1）抽象类可以有构造方法，接口中不能有构造方法。
（2）抽象类中可以有普通成员变量，接口中没有普通成员变量
（3）抽象类中可以包含静态方法，接口中不能包含静态方法
（4） 一个类可以实现多个接口，但只能继承一个抽象类。
（5）接口可以被多重实现，抽象类只能被单一继承
（6）如果抽象类实现接口，则可以把接口中方法映射到抽象类中作为抽象方法而不必实现，而在抽象类的子类中实现接口中方法

接口和抽象类的相同点：
(1) 都可以被继承
(2) 都不能被实例化
(3) 都可以包含方法声明
(4) 派生类必须实现未实现的方法


抽象类名作为形参和返回值：
方法的形参是抽象类名，其实需要的是该抽象类的子类对象
方法的返回值是抽象类名，其实返回的是该抽象类的子类对象
接口名作为形参和返回值：
方法的形参是接口名，其实需要的是该接口的实现类对象
方法的返回值是接口名，其实返回的是该接口的实现类对象



内部类访问特点：
内部类可以直接访问外部类的成员，包括私有；
外部类要是访问内部类的成员，必须创建对象
成员内部类，
创建对象格式：外部类名.内部类名 对象名=外部类对象.内部类对象
Outer.Inner oi = new Outer().new Inner();

Math
Object.toString
System.currentTimeMillis();返回当前时间（毫秒）
以上几个都是可以直接通过类名直接调用
Arrays   Arrays.toString（）返回指定数组的内容的字符串表示形式
Arrays.sort()按照数字顺序排列指定的数组

装箱：把基本数据类型转换为对应的包装类类型
拆箱：把包装类类型转换为对应的基本数据类型
基本数据		包装类类型
int(4字节)		Integer
byte(1字节)	Byte
short(2字节)	Short
long(8字节)	Long
float（4字节）	Float
double(8字节)	Double
char(2字节)	Character
boolean(未定)	Boolean



日期类：

Date类：
public Date（）；分配一个Date对象，表示此时时间，精确到毫秒
public Date（long date）分配一个date对象，初始化为表示从标准基准时间起指定的毫秒数（基准标准时间1970-1-1  00:00:00）
public long getTime() 获取的是日期对象从基准标准时间的毫秒值
public void setTime（long time）设置时间，给的是毫秒值

SimpleDateFormat类：
用于以区域设置敏感的方式格式化和解析日期
y->年          M->月       d->日       H->时           m->分            s->秒
构造方法：
public SimpleDateFormat（）：使用默认模式和日期格式
public SimpleDateFormat（string pattern）:使用给定的模式和日期格式

Calendar日历类：
Calendar c=Calendar.getInstance() //获取日历对象
int year=c.get(Calendar.YEAR);获取年份
int month=c.get(Calendar.MONTH)+1   //获取月份，日历月份从0开始
c.add(int field,int amount)     //时间量的添加和减少
c.set(int year,int month,int date)      //设置当前日历的年月日


异常：
     格式：try{
      可能出现异常的代码；        
        } catch （异常类名 变量名）{
         异常的处理代码；
        } 


File类
file对象的创建:File file=new File("path");








线程与进程
进程：是正在运行的程序，是系统进行资源分配和调用的独立单位，每一个进程都有它自己的内存空间和系统资源。
线程：是进程的单个顺序控制流，是一条执行路径

多线程的实现方法：
方式一：继承Thread类
定义类MyThread继承Thread类
在MyThread类中重写run()方法
创建MyThread对象，启动线程（.start()）
重写run()方法是用来封装被线程执行的代码，直接调用相当于普通方法的调用
start() 启动线程然后由JVM（Java虚拟机）调用此线程的run()方法
有效分离，较好的体现了面对对象的设计思想
方式二：实现Runnable接口
定义一个类MyRunnable实现Runnable接口，重写run（）方法
创建MyRunnable类的对象，创建Thread类对象，把MyRunnable对象作为参数作为构造方法的参数，启动线程

相比于继承Thread类，实现Runnable接口的好处，避免Java单继承的局限性，适合多个相同程序代码去处理同一资源的情况，把线程和程序的代码，数据

setName(String name):将此线程名称更改为等于参数name
String getName():返回此线程名称

线程的调度：
有两种调度模型：分时调度模型和抢占式调度模型。
分时调度模型：是指让所有的线程轮流获得cpu的使用权,并且平均分配每个线程占用的CPU的时间片这个也比较好理解。
java虚拟机采用抢占式调度模型：是指优先让可运行池中优先级高的线程占用CPU，如果可运行池中的线程优先级相同，那么就随机选择一个线程，使其占用CPU。处于运行状态的线程会一直运行，直至它不得不放弃CPU。

线程优先级：
public final intgetPriority():返回此线程的优先级
public final void setPriority(int newPriority):更改此线程的优先级
优先级1-10，默认为5
线程优先级高仅仅表示线程获取CPU时间片的几率高，但是要在次数比较多，或者多次运行才能看到你想要的效果

线程的控制：
static void sleep（long millis）线程休眠，单位毫秒
void join()  等待这个线程死亡，其他线程才能进行
void setDaemon(boolean on)将此线程标记为守护线程，当运行的线程都是守护线程时，Java虚拟机将退出，但不是立即退出

线程的让步：调用yield(),它不同于sleep（）方法，sleep（）会阻塞该进程，yield()只是让出CPU的使用权，线程转换为就绪状态

Java多线程之线程的生命周期
当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。在线程的生命周期中，它要经过新建(New)、就绪（Runnable）、运行（Running）、阻塞(Blocked)和死亡(Dead)5种状态。尤其是当线程启动以后，它不可能一直"霸占"着CPU独自运行，所以CPU需要在多条线程之间切换，于是线程状态也会多次在运行、阻塞之间切换

    新建状态，当程序使用new关键字创建了一个线程之后，该线程就处于新建状态，此时仅由JVM为其分配内存，并初始化其成员变量的值
    就绪状态，当线程对象调用了start()方法之后，该线程处于就绪状态。Java虚拟机会为其创建方法调用栈和程序计数器，等待调度运行，有执行资格没有执行权
    运行状态，如果处于就绪状态的线程获得了CPU，开始执行run()方法的线程执行体，则该线程处于运行状态，有执行资格也有执行权
    阻塞状态，当处于运行状态的线程失去所占用资源之后（调用sleep（）或者其他阻塞方法），便进入阻塞状态
   死亡状态，线程在run()方法执行结束后进入死亡状态。此外，如果线程执行了interrupt()或stop()方法，那么它也会以异常退出的方式进入死亡状态。

判断多线程出现数据安全的标准：是否是多线程环境，是否有共享数据，是否有多条语句操作共享数据，倘若以上都有，必然会出现数据安全

解决多线程数据安全的方法：使用同步代码块，把多条语句操作共享数据的代码锁起来
同步代码块格式：synchronized(任意对象){多条语句操作共享数据的代码}
任意对象要是一样的，保证锁是同一个，但是会降低程序运行效率

线程安全的类：StringBuffer，Vector，Hashtable

Lock锁
void lock（）：获得锁
void unlock()  :释放锁
Lock 是接口不能直接实例化，采用它的实现类ReentrantLock来实例化
private Lock lock=new ReetrantLock();
一般用try......finally   防止只有获得锁没有释放锁
try{  lock.lock();
	多条语句操作共享数据的代码
}finally{lock.unlock()}




网络编程：
InetAddress的使用
InteAddress:此类表示Interne协议（IP）地址
static InetAddress getByName(String host)确认主机名称的IP地址，主机名可以是机器名称也可以是IP地址
String getHostName() 获取IP地址的主机名
String getHostAddress()  返回文本显示中的IP地址字符串


Swing
//获取屏幕窗口尺寸，没有去处任务栏
        Dimension size = Toolkit.getDefaultToolkit().getScreenSize();
        //获取屏幕窗口尺寸，去处任务栏
        GraphicsEnvironment gri=GraphicsEnvironment.getLocalGraphicsEnvironment();
        Rectangle size2 = gri.getMaximumWindowBounds();
关闭窗口
JFrame window=new JFrame（）;
window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
设置窗口图标：
window.setIconImage(new ImageIcon("路径").getImage());


























































